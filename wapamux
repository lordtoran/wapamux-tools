#!/bin/sh

# wapamux
#
# Remux all video files of a specific type found in the current directory into
# a subdirectory. If a series.opt file is found in the current directory, a
# sanitized version of it is passed to mkvmerge as an options file.
#
# Requires: mkvmerge (from the mkvtoolnix package), sed.
#
# This script is in the public domain and was originally written by
# Dennis Murczak <https://github.com/lordtoran/>


#### GLOBALS ####

ext="mkv"
forcedext=

opts=
stripopts=
optsfile="series.opt"
tmpfile="$optsfile.~~~"

outdir="__converted__"


#### FUNCTIONS ####

usage () {
  echo "Usage: $(basename $0) [-s | --scan-headers | -t | --strip-titles] [fileext]"
  echo "
Remuxes all files ending in .fileext found in the current directory into a
subdirectory '$outdir'. fileext defaults to 'mkv'.

If a file '$optsfile' is found in the current directory,
it is assumed that the directory contains a TV or anime series. In this case
a sanitized version of the option file (sans input and output filespecs) is
passed to mkvmerge for each video file. Header metadata has to match across
files for this to work, and an according safeguard check is done. Also, if an
option file is present, fileext can be determined automagically.

The -t parameter causes all processed video files to be stripped of their
title fields.

Without an option file, a plain batch convert/remux without verification or
altering of file metadata is done.

Prepending the -s or --scan-headers option only does the metadata
verification pass, regardless of the presence of '$optsfile'.

An exit status of 0 is returned on an error-free run, 1 in case of a file-
related problem or failure of an external command, 2 if the metadata
consistency check is unsuccessful.
"
  exit 0
}

commandexists () {
  command -v "$1" > /dev/null || { echo "Required command '$1' not found! $2" && echo && exit 1; }
}

filesexist () {
  files=$(ls *.$ext) 2> /dev/null

  if [ ! "$files" ]; then
    echo "No matching files found for *.$ext! Exiting."
    echo
    echo "For usage information, try -h or --help."
    echo
    exit 1
  fi
}

countfiles () {
  ls -l *.$ext | wc -l
}

scanheaders () {
  # Check uniformity of MKV headers and error out on first mismatch

  local mkvi=
  local mkvi_old=

  local numfiles=$(countfiles)
  
  echo "Starting metadata scan of all .$ext files."
  echo

  for f in *.$ext; do
    echo "Checking headers: $f"

    # Compare the order, type, language and codec (in case of multiple same
    # language tracks) of the video file's tracks to the last iteration.
    # "id": (track ID) as a grep pattern will also catch attached subtitle
    # fonts, which are often mixed up inbetween files, so we use "number":
    # (the track number) instead.
    mkvi=$(mkvmerge --identify --identification-format json "$f" | grep -E '"codec": |"number": |"language": |"type": ')

    if [ "$?" -ne "0" ]; then
      echo "Not a supported video file: $f"
      echo
      rm -f $tmpfile
      exit 1
    fi

    # FIXME: We have to check for the single-file case inside the loop for now
    # so mkvmerge --identify can throw an error if the file is corrupt.
    [ "$numfiles" -eq "1" ] && { echo "Single file: Skipping metadata scan." && echo && return; }
    
    if [ -n "$mkvi_old" ]; then
      if [ "$mkvi" != "$mkvi_old" ]; then
      echo
      echo "Metadata mismatch: $f"
      echo $1
      echo
      
      rm -f $tmpfile
      
      exit 2
      fi
    fi

  mkvi_old=$mkvi
  done
  
  echo
  echo "Metadata seems consistent across all files."
  echo
}

processfiles () {
  local numfiles=$(countfiles)
  local c="0"

  local fb
  local of

  mkdir -p $outdir

  for f in *.$ext; do
    c=$(($c+1))
    echo "Processing ($c/$numfiles): $f"
    echo
    
    fb=$(basename "$f" .$ext)
    of="$outdir/$fb.mkv"
    mkvmerge --identify "$f"
    mkvmerge --output "$of" $opts "$f"

    # Some error checking, just in case
    if [ "$?" -ne "0" ]; then
      echo "There was a problem with mkvmerge. Aborting."
      echo

      rm -f $tmpfile
      exit 1
    fi

    # mkvpropedit returns nonzero so it goes below the error check
    [ "$stripopts" ] && mkvpropedit "$of" $stripopts

    echo
  done

  rm -f $tmpfile

  echo "All done!"
  echo

  exit 0
}


#### MAIN ####

commandexists "mkvmerge" "Please install mkvtoolnix."
commandexists "mkvpropedit" "Please install mkvtoolnix."
commandexists "sed" "Sed is love, sed is life."

# TODO: Implement a parameter shifter.
if [ "$1" ]; then
  case $1 in
    "--help" | "-h" )
      usage
      ;;
    "--scan-headers" | "-s")
      [ "$2" ] && { ext="$2" && forcedext=$ext; }

      filesexist
      scanheaders "Metadata is not consistent across files. Try wapasplit for a multipass remux."

      exit 0
      ;;
    "--strip-titles" | "-t")
      stripopts="--delete title"
      [ "$2" ] && { ext="$2" && forcedext=$ext; }
      ;;
    *)
      ext="$1"
      forcedext=$ext
      ;;
  esac
fi

# Catch CTRL+C & friends so we donâ€™t leave a temp file.
trap "rm -f $tmpfile; exit" HUP INT TERM

if [ -f $optsfile ]; then
  optsfileext=$(grep -A1 -e "^($" $optsfile | tr . \\n | tail -n1)
  [ -z "$forcedext" ] && [ -n "$optsfileext" ] && ext=$optsfileext
fi

filesexist

echo "Preparing to remux all .$ext files to a subdirectory. Continue [Y/n/?]?"
read -r ans

case $ans in
  "y" | "Y" | "")
    break
    ;;
  "?")
    usage
    ;;
  *)
    echo "Aborting."
    echo
    exit 0
    ;;
esac

# If series.opt is present, assume the directory contains a series and header
# scan the video files first.
if [ -f $optsfile ]; then
  echo "$optsfile found. Assuming the directory contains a TV or anime series."
  echo
  
  opts="@$tmpfile"

  # Temporarily filter filenames and UI language out of the options.
  # This will fail with trailing spaces, as it matches to the end of line.
  sed -e '/--ui-language$/,+1d' -e '/--output$/,+1d' -e '/--title$/,+1d' -e '/^($/,+2d' $optsfile > $tmpfile

  scanheaders "Cannot apply options; consider doing multiple passes instead. Exiting."

  echo "Start remux now [Y/n]?"
  read -r ans

  case $ans in
    "y" | "Y" | "")
      break
      ;;
    *)
      echo "Aborting."
      echo
      
      rm -f $tmpfile
      exit 0
      ;;
  esac
fi

processfiles
